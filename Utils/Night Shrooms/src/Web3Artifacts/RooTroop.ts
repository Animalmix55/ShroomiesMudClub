/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paid = ContractEventLog<{
  sender: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface RooTroop extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RooTroop;
  clone(): RooTroop;
  methods: {
    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string): NonPayableTransactionObject<string>;

    /**
     * The free mint
     */
    freeMint(): NonPayableTransactionObject<{
      mintPrice: string;
      startDate: string;
      endDate: string;
      totalMinted: string;
      maxMinted: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    lastMintNonce(arg0: string): NonPayableTransactionObject<string>;

    minted(): NonPayableTransactionObject<string>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    /**
     * An exclusive mint for members granted presale from influencers
     */
    presaleMint(): NonPayableTransactionObject<{
      mintPrice: string;
      startDate: string;
      endDate: string;
      totalMinted: string;
      maxMinted: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    /**
     * The public mint for everybody.
     */
    publicMint(): NonPayableTransactionObject<{
      mintPrice: string;
      startDate: string;
      maxPerTransaction: string;
      0: string;
      1: string;
      2: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(): NonPayableTransactionObject<string>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * be sure to terminate with a slash
     * Sets the base URI for all tokens
     * @param uri - the target base uri (ex: 'https://google.com/')
     */
    setBaseURI(uri: string): NonPayableTransactionObject<void>;

    /**
     * Burns the provided token id if you own it. Reduces the supply by 1.
     * @param tokenId - the ID of the token to be burned.
     */
    burn(tokenId: number | string | BN): NonPayableTransactionObject<void>;

    getWhitelistMints(user: string): NonPayableTransactionObject<{
      free: string;
      presale: string;
      0: string;
      1: string;
    }>;

    /**
     * Updates the presale mint's characteristics
     * @param endDate - the end date for that mint in UNIX seconds
     * @param mintPrice - the cost for that mint in WEI
     * @param startDate - the start date for that mint in UNIX seconds
     */
    updatePresaleMint(
      mintPrice: number | string | BN,
      startDate: number | string | BN,
      endDate: number | string | BN,
      maxMinted: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Updates the free mint's characteristics
     * @param endDate - the end date for that mint in UNIX seconds
     * @param startDate - the start date for that mint in UNIX seconds
     */
    updateFreeMint(
      startDate: number | string | BN,
      endDate: number | string | BN,
      maxMinted: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Updates the public mint's characteristics
     * @param maxPerTransaction - the maximum amount allowed in a wallet to mint in the public mint
     * @param mintPrice - the cost for that mint in WEI
     * @param startDate - the start date for that mint in UNIX seconds
     */
    updatePublicMint(
      mintPrice: number | string | BN,
      maxPerTransaction: number | string | BN,
      startDate: number | string | BN
    ): NonPayableTransactionObject<void>;

    getPremintHash(
      minter: string,
      quantity: number | string | BN,
      mintId: number | string | BN,
      nonce: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Mints in the premint stage by using a signed transaction from a centralized whitelist. The message signer is expected to only sign messages when they fall within the whitelist specifications.
     * @param mintId - 0 for free mint, 1 for presale mint
     * @param nonce - a random nonce which indicates that a signed transaction hasn't already been used.
     * @param quantity - the number to mint
     * @param signature - the signature given by the centralized whitelist authority, signed by                    the account specified as mintSigner.
     */
    premint(
      quantity: number | string | BN,
      mintId: number | string | BN,
      nonce: number | string | BN,
      signature: string | number[]
    ): PayableTransactionObject<void>;

    /**
     * Mints the given quantity of tokens provided it is possible to.This function allows minting in the public sale         or at any time for the owner of the contract.
     * @param quantity - the number of tokens to mint
     */
    mint(quantity: number | string | BN): PayableTransactionObject<void>;

    /**
     * Withdraws balance from the contract to the owner (sender).
     * @param amount - the amount to withdraw, much be <= contract balance.
     */
    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paid(cb?: Callback<Paid>): EventEmitter;
    Paid(options?: EventOptions, cb?: Callback<Paid>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paid", cb: Callback<Paid>): void;
  once(event: "Paid", options: EventOptions, cb: Callback<Paid>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
