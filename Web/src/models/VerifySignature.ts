/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface VerifySignature extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VerifySignature;
  clone(): VerifySignature;
  methods: {
    getMessageHash(
      encodedParameters: string | number[]
    ): NonPayableTransactionObject<string>;

    getEthSignedMessageHash(
      _messageHash: string | number[]
    ): NonPayableTransactionObject<string>;

    verify(
      signer: string,
      encodedParameters: string | number[],
      signature: string | number[]
    ): NonPayableTransactionObject<boolean>;

    recoverSigner(
      ethSignedMessageHash: string | number[],
      signature: string | number[]
    ): NonPayableTransactionObject<string>;

    splitSignature(sig: string | number[]): NonPayableTransactionObject<{
      r: string;
      s: string;
      v: string;
      0: string;
      1: string;
      2: string;
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
